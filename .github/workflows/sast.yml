name: SAST (Semgrep)

on:
  push:
    branches: [ "main", "master" ]
  pull_request:
    branches: [ "main", "master" ]

permissions:
  contents: read
  security-events: write   # para enviar SARIF ao Code Scanning
  actions: read

jobs:
  semgrep:
    name: Run Semgrep SAST
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python (para semgrep CLI opcional)
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: Install Semgrep
        run: |
          pip install --upgrade pip
          pip install semgrep

      # Rodando com conjuntos de regras oficiais (OWASP, security audit, segredos)
      - name: Run Semgrep (JSON + SARIF + HTML)
        run: |
          mkdir -p reports
          # Ajuste as pastas/projetos conforme sua stack
          semgrep \
            --error \
            --timeout 180 \
            --max-target-bytes 200000000 \
            --config p/owasp-top-ten \
            --config p/security-audit \
            --config p/secrets \
            --config p/r2c-ci \
            --exclude node_modules \
            --exclude dist \
            --exclude build \
            --json -o reports/semgrep.json || true

          # Exporta também SARIF pro GitHub Code Scanning
          semgrep \
            --timeout 180 \
            --config p/owasp-top-ten \
            --config p/security-audit \
            --config p/secrets \
            --config p/r2c-ci \
            --exclude node_modules \
            --exclude dist \
            --exclude build \
            --sarif -o reports/semgrep.sarif || true

          # Gera HTML legível (via jq + template simples)
          python - << 'PY'
import json, html, os
from datetime import datetime
data=json.load(open("reports/semgrep.json"))
findings=[]
for r in data.get("results", []):
    findings.append({
        "check_id": r.get("check_id"),
        "path": r.get("path"),
        "start": r.get("start",{}).get("line"),
        "severity": r.get("extra",{}).get("severity"),
        "message": r.get("extra",{}).get("message"),
        "metadata": r.get("extra",{}).get("metadata",{})
    })
sev_order = {"CRITICAL":4,"HIGH":3,"MEDIUM":2,"LOW":1,"INFO":0}
findings.sort(key=lambda x: sev_order.get((x["severity"] or "INFO").upper(),0), reverse=True)

def row(f):
    rec = f["metadata"].get("fix", f["metadata"].get("references", "")) or ""
    return f"<tr><td>{html.escape(str(f['severity']))}</td><td>{html.escape(str(f['check_id']))}</td><td>{html.escape(str(f['path']))}:{html.escape(str(f['start']))}</td><td>{html.escape(str(f['message'] or ''))}</td><td>{html.escape(str(rec)[:500])}</td></tr>"

rows="".join(row(f) for f in findings)
html_doc=f"""<!doctype html><html><head><meta charset="utf-8">
<title>Relatório SAST - Semgrep</title>
<style>
body{{font-family:system-ui,Segoe UI,Arial,sans-serif;padding:24px}}
h1{{margin:0 0 8px}}
table{{border-collapse:collapse;width:100%}}
th,td{{border:1px solid #ddd;padding:8px;vertical-align:top}}
th{{background:#f5f5f5;text-align:left}}
.sev{{margin:16px 0}}
</style></head><body>
<h1>Relatório SAST - Semgrep</h1>
<p>Gerado em {html.escape(datetime.utcnow().isoformat())}Z</p>
<div class="sev">
<strong>Resumo por severidade:</strong><br/>
CRITICAL: {sum(1 for f in findings if (f["severity"] or "").upper()=="CRITICAL")} |
HIGH: {sum(1 for f in findings if (f["severity"] or "").upper()=="HIGH")} |
MEDIUM: {sum(1 for f in findings if (f["severity"] or "").upper()=="MEDIUM")} |
LOW: {sum(1 for f in findings if (f["severity"] or "").upper()=="LOW")} |
INFO: {sum(1 for f in findings if (f["severity"] or "").upper()=="INFO")}
</div>
<table>
<thead><tr><th>Severidade</th><th>Regra</th><th>Arquivo:Linha</th><th>Descrição</th><th>Recomendação/Referência</th></tr></thead>
<tbody>{rows or '<tr><td colspan="5">Sem achados</td></tr>'}</tbody></table>
</body></html>"""
os.makedirs("reports", exist_ok=True)
open("reports/semgrep.html","w",encoding="utf-8").write(html_doc)
PY

      # Publica SARIF para aba "Security > Code scanning alerts"
      - name: Upload SARIF to GitHub
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: reports/semgrep.sarif

      # Faz o pipeline falhar se houver HIGH/CRITICAL (gate)
      - name: Fail build on HIGH/CRITICAL
        run: |
          python - << 'PY'
import json, sys
data=json.load(open("reports/semgrep.json"))
sev=lambda r:(r.get("extra",{}).get("severity") or "").upper()
bad=[r for r in data.get("results",[]) if sev(r) in ("HIGH","CRITICAL")]
if bad:
    print(f"Falhando: {len(bad)} achados HIGH/CRITICAL")
    sys.exit(1)
print("Nenhum HIGH/CRITICAL encontrado.")
PY

      - name: Upload artifacts (JSON/HTML)
        uses: actions/upload-artifact@v4
        with:
          name: semgrep-reports
          path: reports/*
          retention-days: 14
