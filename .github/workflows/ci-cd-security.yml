name: CI/CD + Security (SAST, SCA, DAST)

on:
  push:
    branches: [ "main", "master", "release/**" ]
  pull_request:
    branches: [ "main", "master" ]
  workflow_dispatch:

permissions:
  contents: read
  security-events: write    # enviar SARIF p/ Code Scanning
  actions: read

env:
  FAIL_ON_SEVERITY: "HIGH"  # limiar para falhar jobs (HIGH/CRITICAL)

jobs:
  # ---------- CI: SAST ----------
  sast:
    name: SAST (Semgrep)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with: { python-version: "3.x" }

      - name: Install Semgrep
        run: |
          pip install --upgrade pip
          pip install semgrep

      - name: Run Semgrep
        run: |
          mkdir -p reports
          semgrep \
            --timeout 180 \
            --config ./semgrep/semgrep.yml 2>/dev/null || true
          # Fallback caso não use semgrep.yml central
          semgrep \
            --timeout 180 \
            --config p/owasp-top-ten \
            --config p/security-audit \
            --config p/secrets \
            --config ./semgrep/rules \
            --exclude node_modules --exclude dist --exclude build \
            --json -o reports/semgrep.json || true
          semgrep \
            --timeout 180 \
            --config p/owasp-top-ten \
            --config p/security-audit \
            --config p/secrets \
            --config ./semgrep/rules \
            --exclude node_modules --exclude dist --exclude build \
            --sarif -o reports/semgrep.sarif || true

      - name: Upload SARIF (SAST)
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: reports/semgrep.sarif

      - name: Gate SAST (fail on HIGH/CRITICAL)
        run: |
          python - << 'PY'
import json,sys
try:
  data=json.load(open("reports/semgrep.json"))
except:
  print("Sem semgrep.json; assumindo 0 achados.")
  sys.exit(0)
sev=lambda r:(r.get("extra",{}).get("severity") or "").upper()
bad=[r for r in data.get("results",[]) if sev(r) in ("HIGH","CRITICAL")]
print(f"Total achados: {len(data.get('results',[]))} | HIGH/CRITICAL: {len(bad)}")
sys.exit(1 if bad else 0)
PY

      - uses: actions/upload-artifact@v4
        with:
          name: sast-semgrep
          path: reports/*
          retention-days: 14

  # ---------- CI: SCA ----------
  sca:
    name: SCA (OWASP Dependency-Check)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Cache DC Data
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository/org/owasp/dependency-check-data
          key: dc-data-${{ runner.os }}-v8

      - name: Run Dependency-Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: "challenge-sprint3-cyber"
          path: "."
          format: "HTML,JSON,SARIF"
          out: "dc-reports"
          args: >
            --failOnCVSS 7.0
            --enableExperimental
            --disableArchive
            --scan ./
            --suppression sca/dependency-check-suppressions.xml
            --ossIndexUsername ${{ secrets.OSSINDEX_USER }}
            --ossIndexPassword ${{ secrets.OSSINDEX_TOKEN }}

      - name: Upload SARIF (SCA)
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: dc-reports/dependency-check-report.sarif

      - uses: actions/upload-artifact@v4
        with:
          name: sca-dependency-check
          path: dc-reports/*
          retention-days: 14

  # ---------- CD: Deploy Staging (exemplo dummy) ----------
  deploy_staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [sast, sca]
    if: ${{ always() && !cancelled() && needs.sast.result == 'success' && needs.sca.result == 'success' }}
    steps:
      - run: |
          echo "Faça aqui seu deploy real (ex: Docker/Helm/Vercel/EB/etc)."
          echo "Se falhar, o DAST não roda."
      - name: Expose STAGING_URL
        run: echo "STAGING=${{ secrets.STAGING_URL }}" >> $GITHUB_ENV

  # ---------- CD: DAST (ZAP) ----------
  dast:
    name: DAST (OWASP ZAP)
    runs-on: ubuntu-latest
    needs: [deploy_staging]
    steps:
      - uses: actions/checkout@v4

      - name: Install ZAP
        run: |
          sudo apt-get update
          sudo apt-get install -y zaproxy

      - name: Run ZAP Automation
        env:
          ZAP_TARGET: ${{ secrets.STAGING_URL }}
        run: |
          mkdir -p dast-reports
          zap.sh -cmd -autorun dast/zap-config.yaml \
            -session dast-reports/zap-session.session \
            -addonupdate \
            -addoninstall pscanrulesBeta \
            -addoninstall ascanrulesBeta

      - name: Export ZAP HTML
        run: |
          zap.sh -cmd -session dast-reports/zap-session.session \
            -reportformat HTML \
            -reportfile dast-reports/zap-report.html

      - uses: actions/upload-artifact@v4
        with:
          name: dast-zap
          path: dast-reports/*
          retention-days: 14

      - name: Gate DAST (fail on HIGH/CRITICAL)
        run: |
          if grep -qi "High" dast-reports/zap-report.html || grep -qi "Critical" dast-reports/zap-report.html; then
            echo "DAST encontrou HIGH/CRITICAL. Bloqueando pipeline."
            exit 1
          fi

  # ---------- (Opcional) Deploy Produção ----------
  deploy_prod:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [dast]
    if: ${{ github.ref == 'refs/heads/main' && needs.dast.result == 'success' }}
    steps:
      - run: echo "Execute aqui o deploy de produção."
      - run: echo "Só executa se DAST passou sem HIGH/CRITICAL."

  # ---------- Notificações ----------
  notify:
    name: Notify Slack
    runs-on: ubuntu-latest
    needs: [sast, sca, dast]
    if: always()
    steps:
      - name: Build summary message
        id: sum
        run: |
          echo "status_sast=${{ needs.sast.result }}" >> $GITHUB_OUTPUT
          echo "status_sca=${{ needs.sca.result }}" >> $GITHUB_OUTPUT
          echo "status_dast=${{ needs.dast.result }}" >> $GITHUB_OUTPUT
          echo "run_url=${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}" >> $GITHUB_OUTPUT

      - name: Post to Slack
        if: ${{ env.SLACK_WEBHOOK_URL != '' }}
        env:
          HOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
          S_SAST: ${{ steps.sum.outputs.status_sast }}
          S_SCA:  ${{ steps.sum.outputs.status_sca }}
          S_DAST: ${{ steps.sum.outputs.status_dast }}
          RUN_URL: ${{ steps.sum.outputs.run_url }}
        run: |
          STATUS="SAST: ${S_SAST} | SCA: ${S_SCA} | DAST: ${S_DAST}"
          COLOR="#36a64f"
          if [ "$S_SAST" != "success" ] || [ "$S_SCA" != "success" ] || [ "$S_DAST" != "success" ]; then
            COLOR="#e01e5a"
          fi
          PAYLOAD=$(cat << JSON
          {
            "attachments": [{
              "color": "$COLOR",
              "title": "CI/CD Security Pipeline",
              "text": "$STATUS",
              "fields": [
                {"title": "Repo", "value": "${{ github.repository }}", "short": true},
                {"title": "Branch", "value": "${{ github.ref_name }}", "short": true}
              ],
              "actions": [{
                "type": "button",
                "text": "Ver execução",
                "url": "$RUN_URL"
              }]
            }]
          }
JSON
)
          curl -X POST -H 'Content-type: application/json' --data "$PAYLOAD" "$HOOK"
