name: CI/CD + Security (SAST, SCA, DAST)

on:
  push:
    branches: [ "main", "master" ]
  pull_request:
    branches: [ "main", "master" ]
  workflow_dispatch:

permissions:
  contents: read
  security-events: write   # enviar SARIF para Security > Code scanning alerts

env:
  NODE_VERSION: "20"
  FAIL_ON_CVSS: "7.0"      # SCA: falha se CVSS >= 7.0
  FAIL_ON_SEVERITY: "HIGH" # SAST/DAST: falha se High/Critical

jobs:
  # ======================= SAST =======================
  sast:
    name: SAST (Semgrep)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Semgrep
        run: |
          python -m pip install --upgrade pip
          pip install semgrep

      - name: Run Semgrep (JSON + SARIF)
        run: |
          mkdir -p reports
          # use suas regras + pacotes oficiais
          semgrep ci --json --json-output=reports/semgrep.json || true
          semgrep ci --sarif --sarif-output=reports/semgrep.sarif || true

      - name: Upload SARIF (SAST)
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: reports/semgrep.sarif

      - name: Gate SAST (fail on HIGH/CRITICAL)
        run: |
          python - << 'PY'
import json,sys
try:
  data=json.load(open("reports/semgrep.json"))
  results=data.get("results",[])
  bad=[r for r in results if (r.get("extra",{}).get("severity","").upper() in ("HIGH","CRITICAL"))]
  print(f"Semgrep: total={len(results)} high/critical={len(bad)}")
  sys.exit(1 if bad else 0)
except FileNotFoundError:
  print("Semgrep: sem arquivo de resultados; seguindo.")
  sys.exit(0)
PY

      - uses: actions/upload-artifact@v4
        with:
          name: sast-semgrep-${{ github.run_attempt }}
          path: reports/*
          retention-days: 14
          overwrite: true

  # ======================= SCA =======================
  sca:
    name: SCA (OWASP Dependency-Check)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with: { node-version: ${{ env.NODE_VERSION }} }

      - name: npm ci (popular node_modules p/ melhor detecção)
        run: |
          if [ -f package.json ]; then
            npm ci || npm i
          fi

      - name: Cache DC Data
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository/org/owasp/dependency-check-data
          key: dc-data-${{ runner.os }}-v8

      - name: Run Dependency-Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: "${{ github.repository }}"
          path: "."
          format: "ALL"
          out: "dc-reports"
          args: >
            --failOnCVSS ${{ env.FAIL_ON_CVSS }}
            --enableRetired
            --enableExperimental
            --disableArchive
            --scan ./
            ${{ (secrets.OSSINDEX_USER != '' && secrets.OSSINDEX_TOKEN != '')
                && format('--ossIndexUsername {0} --ossIndexPassword {1}', secrets.OSSINDEX_USER, secrets.OSSINDEX_TOKEN)
                || '--disableOssIndex' }}

      - name: Upload SARIF (SCA)
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: dc-reports/dependency-check-report.sarif

      - uses: actions/upload-artifact@v4
        with:
          name: sca-dependency-check-${{ github.run_attempt }}
          path: dc-reports/*
          retention-days: 14
          overwrite: true

  # =================== Deploy Staging (local) ===================
  deploy_staging:
    name: Deploy Staging (Compose local)
    runs-on: ubuntu-latest
    needs: [sast, sca]
    if: ${{ needs.sast.result == 'success' && needs.sca.result == 'success' }}
    steps:
      - uses: actions/checkout@v4

      - name: Start app (docker compose)
        run: |
          docker compose up -d
          for i in {1..30}; do
            if curl -fsS http://127.0.0.1:3000/ >/dev/null; then
              echo "APP UP"; exit 0; fi
            sleep 2
          done
          echo "App não respondeu em http://127.0.0.1:3000"
          docker compose logs --no-color || true
          exit 1

  # ======================= DAST =======================
  dast:
    name: DAST (OWASP ZAP Baseline)
    runs-on: ubuntu-latest
    needs: [deploy_staging]
    steps:
      - uses: actions/checkout@v4

      - name: ZAP Baseline Scan (localhost)
        uses: zaproxy/action-baseline@v0.14.0
        with:
          docker_name: 'ghcr.io/zaproxy/zaproxy:stable'
          target: 'http://127.0.0.1:3000'
          cmd_options: '-a'                # crawl passivo agressivo
          allow_issue_writing: false
          artifact_name: 'zap-dast-report' # já sobe report_html.html + zap.out

      - name: Gate DAST (fail on HIGH/CRITICAL)
        run: |
          if grep -qiE "High|Critical" report_html.html; then
            echo "ZAP encontrou High/Critical. Falhando job."
            exit 1
          fi
          echo "DAST sem High/Critical."

      - name: Tear down
        if: always()
        run: docker compose down -v || true

  # ===================== Notificação (opcional) =====================
  notify:
    name: Notify Slack
    runs-on: ubuntu-latest
    needs: [sast, sca, dast]
    if: always()
    steps:
      - name: Post to Slack (optional)
        if: ${{ secrets.SLACK_WEBHOOK_URL != '' }}
        env:
          HOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
          RUN_URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          S_SAST: ${{ needs.sast.result }}
          S_SCA:  ${{ needs.sca.result }}
          S_DAST: ${{ needs.dast.result }}
          BRANCH: ${{ github.ref_name }}
          REPO:   ${{ github.repository }}
        run: |
          STATUS="SAST: ${S_SAST} | SCA: ${S_SCA} | DAST: ${S_DAST}"
          COLOR="#36a64f"; if [ "$S_SAST" != "success" ] || [ "$S_SCA" != "success" ] || [ "$S_DAST" != "success" ]; then COLOR="#e01e5a"; fi
          curl -X POST -H 'Content-type: application/json' --data "$(cat <<JSON
          {
            "attachments": [{
              "color": "$COLOR",
              "title": "CI/CD Security Pipeline",
              "text": "$STATUS",
              "fields": [
                {"title": "Repo", "value": "$REPO", "short": true},
                {"title": "Branch", "value": "$BRANCH", "short": true}
              ],
              "actions": [{
                "type": "button",
                "text": "Ver execução",
                "url": "$RUN_URL"
              }]
            }]
          }
JSON
)" "$HOOK"
